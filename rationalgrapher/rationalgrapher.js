// Generated by CoffeeScript 1.10.0
(function() {
  var BASE, FADETIME, OSCSet, Rat, addRules, bigpixel, canvas, context, createNode, ctx, delRules, draw, drawNumberLine, drawTicks, gcd, hackText, lastt, logBase, oscList, oscSetProto, oscs, pixel, ratProto, reduce, restarter, setup, state, step, withState;

  context = new (AudioContext || webkitAudioContext)();

  gcd = function(a, b) {
    if (b === 0) {
      return a;
    } else {
      return gcd(b, a % b);
    }
  };

  ratProto = {
    norm: function() {
      var g;
      if (this.b < 0) {
        this.a = -this.a;
        this.b = -this.b;
      }
      g = gcd(this.a, this.b);
      this.a /= g;
      this.b /= g;
      return this;
    },
    add: function(a, b) {
      this.a = (a * this.b) + (this.a * b);
      this.b = b * this.b;
      return this.norm();
    },
    sub: function(a, b) {
      return this.add(-a, b);
    },
    mult: function(a, b) {
      this.a *= a;
      this.b *= b;
      return this.norm();
    },
    div: function(a, b) {
      return this.mult(b, a);
    }
  };

  Rat = function(a, b) {
    var o;
    o = Object.create(ratProto);
    o.a = a;
    o.b = b;
    return o;
  };

  BASE = 440;

  createNode = function(a, b) {
    var gain, osc;
    osc = context.createOscillator();
    osc.start(context.currentTime + 0.01 + Math.random() * 0.01);
    osc.frequency.value = BASE * a / b;
    gain = context.createGain();
    gain.connect(context.destination);
    gain.gain.value = 1 / 8;
    osc.connect(gain);
    return {
      osc: osc,
      gain: gain
    };
  };

  reduce = function(a, b) {
    var g;
    if (b < 0) {
      a = -a;
      b = -b;
    }
    g = gcd(a, b);
    return [a / g, b / g];
  };

  oscSetProto = {
    add: function(a, b) {
      var o, ref;
      ref = reduce(a, b), a = ref[0], b = ref[1];
      if (this.obj[a + ":" + b]) {
        return this.get(a, b);
      }
      o = Rat(a, b);
      o.node = createNode(a, b);
      this.obj[a + ":" + b] = o;
      return o;
    },
    remove: function(osc) {
      osc.node.gain.gain.value = 0;
      osc.node.osc.stop(context.currentTime + 0.01 + Math.random() * 0.01);
      return delete this.obj[osc.a + ":" + osc.b];
    },
    get: function(a, b) {
      var ref;
      ref = reduce(a, b), a = ref[0], b = ref[1];
      return this.obj[a + ":" + b];
    },
    each: function(f) {
      var k, ref, results, v;
      ref = this.obj;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(f(v));
      }
      return results;
    },
    sorted: function() {
      var k, sorted, v;
      sorted = (function() {
        var ref, results;
        ref = this.obj;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(v);
        }
        return results;
      }).call(this);
      sorted.sort(function(o1, o2) {
        return o1.a / o1.b - o2.a / o2.b;
      });
      return sorted;
    },
    nearest: function(osc) {
      var i, next, nextDist, prev, prevDist, sorted;
      sorted = this.sorted();
      i = sorted.indexOf(osc);
      prev = sorted[i - 1];
      next = sorted[i + 1];
      if (!prev && !next) {
        null;
      }
      prevDist = Math.abs((prev != null ? prev.a : void 0) / (prev != null ? prev.b : void 0) - osc.a / osc.b);
      nextDist = Math.abs((next != null ? next.a : void 0) / (next != null ? next.b : void 0) - osc.a / osc.b);
      if (prevDist > nextDist) {
        return prev;
      } else {
        return next;
      }
    },
    count: function() {
      return Object.keys(this.obj).length;
    }
  };

  OSCSet = function() {
    var o;
    o = Object.create(oscSetProto);
    o.obj = {};
    return o;
  };

  oscs = OSCSet();

  addRules = [];

  delRules = [];

  delRules.push(function(osc) {
    if (osc.a > 16 || osc.b > 16) {
      return oscs.remove(osc);
    }
  });

  delRules.push(function(osc) {
    if (osc.a / osc.b >= 3 || osc.b / osc.a >= 6) {
      return oscs.remove(osc);
    }
  });

  delRules.push(function(osc) {
    var nearest, rat;
    if (!(nearest = oscs.nearest(osc))) {
      return;
    }
    rat = Rat(osc.a * nearest.b, osc.b * nearest.a).norm();
    if (rat.a > 8 || rat.b > 4) {
      return oscs.remove(osc);
    }
  });

  addRules.push(function(osc) {
    if (osc.b > 1) {
      oscs.add(osc.a + 1, osc.b - 1);
    }
    oscs.add(osc.a + 1, osc.b + 2);
    oscs.add(osc.a * 1, osc.b * 3);
    return oscs.add(osc.a * 3, osc.b * 2);
  });

  state = document.getElementById('state');

  canvas = document.getElementById('canvas');

  ctx = canvas.getContext('2d');

  ctx.font = '16px serif';

  ctx.scale(canvas.width, canvas.height);

  pixel = Math.min(1 / canvas.width, 1 / canvas.height);

  bigpixel = Math.max(1 / canvas.width, 1 / canvas.height);

  ctx.lineWidth = bigpixel;

  withState = function(f) {
    ctx.save();
    f();
    return ctx.restore();
  };

  hackText = function(text, x, y, props) {
    return withState(function() {
      var k, v;
      for (k in props) {
        v = props[k];
        ctx[k] = v;
      }
      ctx.scale(1 / canvas.width, 1 / canvas.height);
      return ctx.fillText(text, x * canvas.width, y * canvas.height);
    });
  };

  logBase = function(b, n) {
    return Math.log(n) / Math.log(b);
  };

  drawNumberLine = function(start, base, end) {
    var margin;
    ctx.beginPath();
    margin = 5 * pixel;
    hackText(start, 0 + 1 * pixel, 0.5 - margin, {
      textAlign: 'start',
      textBaseline: 'bottom'
    });
    hackText(base, 1 / 2, 0.5 - margin, {
      textAlign: 'center',
      textBaseline: 'bottom'
    });
    hackText(end, 1 - 1 * pixel, 0.5 - margin, {
      textAlign: 'end',
      textBaseline: 'bottom'
    });
    ctx.moveTo(0, 0.5);
    ctx.lineTo(1, 0.5);
    return ctx.stroke();
  };

  drawTicks = function(vals, min, max) {
    var j, len, results, scale, val, x;
    scale = function(x) {
      if (x >= 1) {
        return 0.5 + logBase(max, x) / 2;
      } else {
        return 0.5 - logBase(min, x) / 2;
      }
    };
    results = [];
    for (j = 0, len = vals.length; j < len; j++) {
      val = vals[j];
      x = scale(val.val);
      ctx.beginPath();
      ctx.moveTo(x, 0.5 - 5 * pixel);
      ctx.lineTo(x, 0.5 + 5 * pixel);
      ctx.stroke();
      results.push(hackText(val.label, x, 0.5 + 5 * pixel, {
        textAlign: 'center',
        textBaseline: 'top'
      }));
    }
    return results;
  };

  lastt = 0;

  FADETIME = 0.1 * 1000;

  oscList = [];

  ctx.clearRect(0, 0, 1, 1);

  draw = function(t) {
    var opacity;
    opacity = Math.min((t - lastt) / FADETIME, 1);
    withState(function() {
      ctx.fillStyle = "rgba(255, 255, 255, " + opacity;
      ctx.fillRect(0, 0, 1, 1);
      ctx.fillStyle = "rgba(0, 0, 0, " + (opacity * 2) + ")";
      ctx.strokeStyle = "rgba(0, 0, 0, " + (opacity * 2) + ")";
      drawNumberLine("1/6", "1/1", "3/1", 3);
      return drawTicks(oscList, 1 / 6, 3);
    });
    lastt = t;
    return requestAnimationFrame(draw);
  };

  restarter = null;

  step = function() {
    var osc;
    oscs.each(function(osc) {
      var j, len, results, rule;
      results = [];
      for (j = 0, len = addRules.length; j < len; j++) {
        rule = addRules[j];
        results.push(rule(osc));
      }
      return results;
    });
    oscs.each(function(osc) {
      var j, len, results, rule;
      results = [];
      for (j = 0, len = delRules.length; j < len; j++) {
        rule = delRules[j];
        results.push(rule(osc));
      }
      return results;
    });
    oscList = (function() {
      var j, len, ref, results;
      ref = oscs.sorted();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        osc = ref[j];
        results.push({
          val: osc.a / osc.b,
          label: osc.a + "/" + osc.b
        });
      }
      return results;
    })();
    if (oscList.length === 0 && !restarter) {
      return restarter = setTimeout(setup, 1000);
    }
  };

  setup = function() {
    var results;
    restarter = null;
    results = [];
    while (Math.random() > 1 / 8) {
      results.push(oscs.add(Math.round(Math.random() * 3 + 1), Math.round(Math.random() * 7 + 1)));
    }
    return results;
  };

  setup();

  setInterval(step, 200);

  draw(0);

}).call(this);
